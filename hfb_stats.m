function hfb_stats(sid)
% HFB_STATS - calculate per-subject statistics on HFB power on correct 
% trials: difference between target and distractor stimuli, correlation
% between difference and RT z-scored on chance distributions generated by
% random permutations.
% 
% Ensure FieldTrip is correcty added to the MATLAB path:
%   addpath <path to fieldtrip home directory>
%   ft_defaults
%
% Inputs:
% sid = subject ID (e.g., 'S1')
%
% Example:
% hfb_stats('S1')
%
% Copyright (c) 2023
% EL Johnson, PhD

clearvars -except sid

% set directories
pth = pwd;
datdir = fullfile(pth, sid, 'hfb'); % output of hfb_analysis
savdir = datdir;

% set number of permutations
nperm = 1000;

% load data
tmp = load(fullfile(datdir, 'data_stim_cf'));
target = tmp.target;
distractor = tmp.distractor;
clear tmp

tmp = load(fullfile(datdir, 'data_stim_cl'));
load1 = tmp.load1;
load2 = tmp.load2;
clear tmp

chans_stim = load(fullfile(savdir, 'chans_stim'));
chans_stim = chans_stim.chans_stim;
chans_resp = load(fullfile(savdir, 'chans_resp'));
chans_resp = chans_resp.chans_resp;

% select stimulus epoch and task-responsive elecs
cfg = [];
cfg.channel = unique([chans_stim, chans_resp]); clear chans*
cfg.latency = [0 0.75];
cfg.avgovertime = 'yes';
cfg.nanmean = 'yes';

target = ft_selectdata(cfg, target);
distractor = ft_selectdata(cfg, distractor);
load2 = ft_selectdata(cfg, load2);
load1 = ft_selectdata(cfg, load1);
    
% stats
rt_cf = cell2mat(target.trialinfo(:,5));
rt_cl = cell2mat(load2.trialinfo(:,5));
jitter_cf = str2double(target.trialinfo(:,17))-str2double(target.trialinfo(:,16));
jitter_cl = str2double(load2.trialinfo(:,17))-str2double(load2.trialinfo(:,16));

% context first condition
hfb = [];
hfb.dimord = 'rpt_chan';
hfb.trialinfo = target.trialinfo;
hfb.label = target.label;
hfb.target = target.trial;
hfb.distractor = distractor.trial;

% mean difference between target and distractor stimuli
hfb.diff = squeeze(nanmean(hfb.target - hfb.distractor,1));
hfb.diff = hfb.diff';

% true correlation with RT
hfb.r = nan(length(hfb.label),1);
for e1 = 1:size(hfb.r,1)
    hfb.r(e1) = partialcorr(hfb.target(:,e1) - hfb.distractor(:,e1), rt_cf, ...
        jitter_cf, 'Type', 'Spearman');
end

% chance distribution
hfb.r_perm = nan(length(hfb.label), nperm);
for z = 1:nperm
    x = randperm(length(rt_cf));
    for e1 = 1:size(hfb.r,1)
        hfb.r_perm(e1,z) = partialcorr(hfb.target(x,e1) - hfb.distractor(x,e1), ...
            rt_cf, jitter_cf, 'Type', 'Spearman');
    end
    clear x
end

% z-score
hfb.r_z = (hfb.r - nanmean(hfb.r_perm,2)) ./ nanstd(hfb.r_perm,[],2);

save(fullfile(savdir, 'cf_hfb'), 'hfb'); 
clear hfb target distractor *cf

% repeat for context last condition
hfb = [];
hfb.dimord = 'rpt_chan';
hfb.trialinfo = load2.trialinfo;
hfb.label = load2.label;
hfb.load2 = load2.trial;
hfb.load1 = load1.trial;

% mean difference between target and distractor stimuli
hfb.diff = squeeze(nanmean(hfb.load2 - hfb.load1,1));
hfb.diff = hfb.diff';

% true correlation with RT
hfb.r = nan(length(hfb.label),1);
for e1 = 1:size(hfb.r,1)
    hfb.r(e1) = partialcorr(hfb.load2(:,e1) - hfb.load1(:,e1), rt_cl, ...
        jitter_cl, 'Type', 'Spearman');
end

% chance distribution
hfb.r_perm = nan(length(hfb.label), nperm);
for z = 1:nperm
    x = randperm(length(rt_cl));
    for e1 = 1:size(hfb.r,1)
        hfb.r_perm(e1,z) = partialcorr(hfb.load2(x,e1) - hfb.load1(x,e1), ...
            rt_cl, jitter_cl, 'Type', 'Spearman');
    end
    clear x
end

% z-score
hfb.r_z = (hfb.r - nanmean(hfb.r_perm,2)) ./ nanstd(hfb.r_perm,[],2);

save(fullfile(savdir, 'cl_hfb'), 'hfb');
clear hfb

end
